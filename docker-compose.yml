version: "3"

services:

## region ip 0x

#  proxy:

#  cron:

## endregion ip 0x

## region ip 1x

  mysql80:
    container_name: ${SERVICE_NAME}_mysql80
    hostname: ${SERVICE_NAME}_mysql80
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    build:
      context: ./mysql80
      dockerfile: dockerfile
    tty: true
    ports:
      - "13306:3306"
    privileged: true
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      DB_HOST: ${DB_HOST}
      TZ: ${TZ}
    volumes:
      - ${VAR}/lib/mysql80:/var/lib/mysql
      - ${VAR}/log/mysql80/sql:/var/log/mysql
      - ${TMP}:/tmp
    networks:
      container-link:
        aliases:
          - mysql80
        ipv4_address: 172.21.100.12

  redis:
    container_name: ${SERVICE_NAME}_redis
    hostname: ${SERVICE_NAME}_redis
    build:
      context: ./redis
      dockerfile: dockerfile
    tty: true
    user: redis
    ports:
      - "6379:6379"
    environment:
      TZ: ${TZ}
    volumes:
      - ${STORAGE}/redis/:/data
    networks:
      container-link:
        aliases:
          - redis
        ipv4_address: 172.21.100.13

  memcached:
    container_name: ${SERVICE_NAME}_memcached
    hostname: ${SERVICE_NAME}_memcached
    build:
      context: ./memcached
      dockerfile: dockerfile
    ports:
      - "11211:11211"
    environment:
      TZ: ${TZ}
    networks:
      container-link:
        aliases:
          - memcached
        ipv4_address: 172.21.100.14

## endregion ip 1x

## region ip 2x

  mail:
    container_name: ${SERVICE_NAME}_mail
    hostname: ${SERVICE_NAME}_mail
    build:
      context: ./mailhog
      dockerfile: dockerfile
    tty: true
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      container-link:
        aliases:
          - mail
        ipv4_address: 172.21.100.22

## endregion ip 2x

## region ip 3x

  app:
    container_name: ${SERVICE_NAME}_app
    hostname: ${SERVICE_NAME}_app
    build:
      context: ./app
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    environment:
      TZ: ${TZ}
    volumes:
      - ${TMP}:/tmp
      - ../app:/var/www/app
      - ${VAR}/log/app:/var/www/app/storage/logs
    depends_on:
      - mysql80
      - redis
      - memcached
    networks:
      container-link:
        aliases:
          - app
        ipv4_address: 172.21.100.32

  web:
    container_name: ${SERVICE_NAME}_web
    hostname: ${SERVICE_NAME}_web
    build:
      context: ./node
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    environment:
      TZ: ${TZ}
    volumes:
      - ${TMP}:/tmp
      - ../web:/var/www/web:cached
    command: sh -c "cd /var/www/web && yarn start"
#    command: sh -c "cd /var/www/web"
    tty: true
    depends_on:
      - app
    networks:
      container-link:
        aliases:
          - web
        ipv4_address: 172.21.100.33

## endregion ip 3x

## region ip 4x
## endregion ip 4x

volumes:

#  proxy:
#    driver: ${VOLUMES_DRIVER}
#  cron:
#    driver: ${VOLUMES_DRIVER}
  mysql80:
    driver: ${VOLUMES_DRIVER}
#  redis:
#    driver: ${VOLUMES_DRIVER}
#  memcached:
#    driver: ${VOLUMES_DRIVER}
  mail:
    driver: ${VOLUMES_DRIVER}
#  app:
#    driver: ${VOLUMES_DRIVER}
#  web:
#    driver: ${VOLUMES_DRIVER}

networks:

  # region auto
  # docker-composeで勝手にデフォルトネットワークが生成される予防。（自動で全コンテナが所属するbridgeを指定）
  default:
    external: true
    name: bridge
  # endregion auto

  # region container network
  # コンテナ間通信用のネットワークセグメント
  container-link:
    name: container-link
    # 以下は書かなくてもよい（サンプルとして）
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.21.100.0/24"
  # endregion container network
