version: "3"

services:

## region misc

  proxy:
    container_name: ${SERVICE_NAME}_proxy
    hostname: ${SERVICE_NAME}_proxy
    build:
      context: ./proxy
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${NGINX_LOCAL_UID}
        LOCAL_USER_NAME: ${NGINX_LOCAL_USER_NAME}
        LOCAL_GID: ${NGINX_LOCAL_GID}
        LOCAL_GROUP_NAME: ${NGINX_LOCAL_GROUP_NAME}
    image: ${SERVICE_NAME}_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAINS: >
        ${DOMAINS}
      STAGE: ${STAGE}
      PROXY_CONNECT_TIMEOUT: 600
      PROXY_SEND_TIMEOUT: 600
      PROXY_READ_TIMEOUT: 600
      CLIENT_MAX_BODY_SIZE: 102400M
      WEBSOCKET: "true"
      HSTS_MAX_AGE: 60
#      FORCE_RENEW: 'true'
      ERROR_LOG: default
      ACCESS_LOG: default
      TZ: ${TZ}
    volumes:
      - ${STORAGE}/proxy/certs:/var/lib/https-portal
      - ${VAR}/log/proxy:/var/log/nginx
#      - ../credential/entrypoint.sh:/var/tmp/entrypoint.sh
    depends_on:
      - nginx
      - react
    networks:
      container-link:
        aliases:
          - proxy
        ipv4_address: ${CONTAINER_LINK_SUBNET}.2
    extra_hosts:
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2

  mail:
    container_name: ${SERVICE_NAME}_mail
    hostname: ${SERVICE_NAME}_mail
    build:
      context: ./mailhog
      dockerfile: dockerfile
    image: ${SERVICE_NAME}_mailhog
    tty: true
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      container-link:
        aliases:
          - mail
        ipv4_address: ${CONTAINER_LINK_SUBNET}.3
    extra_hosts:
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2

#  cron:

## endregion misc

## region database

  mysql80:
    container_name: ${SERVICE_NAME}_mysql80
    hostname: ${SERVICE_NAME}_mysql80
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    build:
      context: ./mysql80
      dockerfile: dockerfile
    image: ${SERVICE_NAME}_mysql80
    tty: true
    ports:
      - "13306:3306"
    privileged: true
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: ${MYSQL_ALLOW_EMPTY_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      DB_HOST: ${DB_HOST}
      TZ: ${TZ}
    volumes:
      - ${VAR}/lib/mysql80:/var/lib/mysql
      - ${VAR}/log/mysql80/sql:/var/log/mysql
      - ${TMP}:/tmp
    networks:
      container-link:
        aliases:
          - mysql80
        ipv4_address: ${CONTAINER_LINK_SUBNET}.12
    extra_hosts:
      - proxy.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - www.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - story.ddd.local:${CONTAINER_LINK_SUBNET}.2

  redis:
    container_name: ${SERVICE_NAME}_redis
    hostname: ${SERVICE_NAME}_redis
    build:
      context: ./redis
      dockerfile: dockerfile
    image: ${SERVICE_NAME}_redis
    tty: true
    user: redis
    ports:
      - "6379:6379"
    environment:
      TZ: ${TZ}
    volumes:
      - ${STORAGE}/redis/:/data
    networks:
      container-link:
        aliases:
          - redis
        ipv4_address: ${CONTAINER_LINK_SUBNET}.13
    extra_hosts:
      - proxy.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - www.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - story.ddd.local:${CONTAINER_LINK_SUBNET}.2

  memcached:
    container_name: ${SERVICE_NAME}_memcached
    hostname: ${SERVICE_NAME}_memcached
    build:
      context: ./memcached
      dockerfile: dockerfile
    image: ${SERVICE_NAME}_memcached
    ports:
      - "11211:11211"
    environment:
      TZ: ${TZ}
    networks:
      container-link:
        aliases:
          - memcached
        ipv4_address: ${CONTAINER_LINK_SUBNET}.14
    extra_hosts:
      - proxy.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - www.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2
      - story.ddd.local:${CONTAINER_LINK_SUBNET}.2

## endregion database

## region backend

  php:
    container_name: ${SERVICE_NAME}_php
    hostname: ${SERVICE_NAME}_php
    build:
      context: ./php
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    image: ${SERVICE_NAME}_php
    environment:
      TZ: ${TZ}
    ports:
      - "9000:9000"
    volumes:
      - ${TMP}:/tmp
      - ../app:/var/www/php
      - ${VAR}/log/php:/var/www/php/storage/logs
    depends_on:
      - mysql80
      - redis
      - memcached
    networks:
      container-link:
        aliases:
          - app
        ipv4_address: ${CONTAINER_LINK_SUBNET}.22
    extra_hosts:
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2

  nginx:
    container_name: ${SERVICE_NAME}_nginx
    hostname: ${SERVICE_NAME}_nginx
    build:
      context: ./nginx
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    image: ${SERVICE_NAME}_nginx
    environment:
      TZ: ${TZ}
    ports:
      - "8080:8080"
    volumes:
      - ${VAR}/log/nginx:/var/log/nginx
      - ../app:/var/www/php
    depends_on:
      - php
    networks:
      container-link:
        aliases:
          - nginx
        ipv4_address: ${CONTAINER_LINK_SUBNET}.23
    extra_hosts:
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2

## endregion backend

## region frontend

  vue:
    container_name: ${SERVICE_NAME}_vue
    hostname: ${SERVICE_NAME}_vue
    build:
      context: ./vue
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    image: ${SERVICE_NAME}_vue
    environment:
      TZ: ${TZ}
    volumes:
      - ${TMP}:/tmp
      - ../vue:/var/www/vue:cached
    command: sh -c "cd /var/www/vue && yarn install; yarn dev;"
    tty: true
    ports:
      - "3000:3000"
      - "6006:6006"
    depends_on:
      - php
    networks:
      container-link:
        aliases:
          - vue
        ipv4_address: ${CONTAINER_LINK_SUBNET}.32

  react:
    container_name: ${SERVICE_NAME}_react
    hostname: ${SERVICE_NAME}_react
    build:
      context: ./react
      dockerfile: dockerfile
      args:
        LOCAL_UID: ${APACHE_LOCAL_UID}
    image: ${SERVICE_NAME}_react
    environment:
      TZ: ${TZ}
    ports:
      - "3001:3001"
      - "6007:6007"
    volumes:
      - ${TMP}:/tmp
      - ../react:/var/www/react:cached
#    command: sh -c "cd /var/www/react && npm install; npm run dev;"
    tty: true
    depends_on:
      - php
    networks:
      container-link:
        aliases:
          - react
        ipv4_address: ${CONTAINER_LINK_SUBNET}.33
    extra_hosts:
      - api.ddd.local:${CONTAINER_LINK_SUBNET}.2

## endregion frontend

volumes:

  proxy:
    driver: ${VOLUMES_DRIVER}
  mysql80:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  mail:
    driver: ${VOLUMES_DRIVER}
  php:
    driver: ${VOLUMES_DRIVER}
  nginx:
    driver: ${VOLUMES_DRIVER}
  react:
    driver: ${VOLUMES_DRIVER}
  vue:
    driver: ${VOLUMES_DRIVER}

networks:

  # region auto
  # docker-composeで勝手にデフォルトネットワークが生成される予防。（自動で全コンテナが所属するbridgeを指定）
  default:
    external: true
    name: bridge
  # endregion auto

  # region container network
  # コンテナ間通信用のネットワークセグメント
  container-link:
    name: ${SERVICE_NAME}_container-link
    # 以下は書かなくてもよい（サンプルとして）
    driver: bridge
#    external: true
    ipam:
      driver: default
      config:
        - subnet: "${CONTAINER_LINK_SUBNET}.0/24"

  # endregion container network
